# -*- coding: utf-8 -*-
"""Mercedees.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PpQv4ErJam_j0cNGhC8QJJvZdD8A_NGK

# Import Packages
"""

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split

from sklearn.preprocessing import OrdinalEncoder, StandardScaler
from sklearn.impute import SimpleImputer

from sklearn.feature_selection import SelectKBest, mutual_info_regression

from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

"""# Import Data"""

train = pd.read_csv('/kaggle/input/mercedes-benz-greener-manufacturing/train.csv.zip')
test = pd.read_csv('/kaggle/input/mercedes-benz-greener-manufacturing/test.csv.zip')

"""## Check Data"""

train.head()

train.info()

"""# Treat Target Column Outliers"""

train['y'].plot.box()

Q1 = train['y'].quantile(0.25)
Q3 = train['y'].quantile(0.75)

IQR = Q3 - Q1

lower_whisker = Q1 - 1.5 * IQR
upper_whisker = Q3 + 1.5 * IQR

print(lower_whisker)
print(upper_whisker)

outlier_index = train[(train.y > upper_whisker)].index
outlier_index

"""## Drop Outliers from Train"""

train = train.drop(outlier_index)

train.info()

"""## Divide Data into X and y"""

y = train['y']
X = train.drop(['y','ID'], axis = 1)

X_test = test.drop(['ID'], axis = 1)

"""## Train & Validation Split"""

X_train, X_val, y_train, y_val = train_test_split(X,y, test_size = 0.2, random_state = 42)

"""## Get Categorical and Numerical Feature Names"""

numerical_features = X.select_dtypes(include = 'number').columns.values
numerical_features

categorical_features = X.select_dtypes(exclude = 'number').columns.values
categorical_features

"""# Preprocessing

## Categorical Encoding
"""

oe = OrdinalEncoder(handle_unknown="use_encoded_value", unknown_value= np.NaN)
oe.fit(X_train[categorical_features])

# transform Train
X_train[categorical_features] = oe.transform(X_train[categorical_features])

# transform Val
X_val[categorical_features] = oe.transform(X_val[categorical_features])

# transform Test
X_test[categorical_features] = oe.transform(X_test[categorical_features])

"""## Missing Value treatment"""

impute = SimpleImputer(strategy = 'median')
impute.fit(X_train)

# transform Train
X_train = impute.transform(X_train)

# transform Val
X_val = impute.transform(X_val)

# transform Test
X_test = impute.transform(X_test)

"""## Transformation"""

scaler = StandardScaler()
scaler.fit(X_train)

# transform Train
X_train = scaler.transform(X_train)

# transform Val
X_val = scaler.transform(X_val)

# transform Test
X_test = scaler.transform(X_test)

"""## Select top Features"""

sel = SelectKBest(mutual_info_regression, k = 30)
sel.fit(X_train, y_train)

# transform Train
X_train = sel.transform(X_train)

# transform Val
X_val = sel.transform(X_val)

# transform Test
X_test = sel.transform(X_test)

"""# Build Model"""

lr = LinearRegression()

lr.fit(X_train, y_train)

"""## Predict Y"""

y_train_pred = lr.predict(X_train)
y_val_pred = lr.predict(X_val)

y_test_pred = lr.predict(X_test)

"""# Check R Squared"""

print(r2_score(y_train, y_train_pred))
print(r2_score(y_val, y_val_pred))

"""# Submission"""

submission = pd.DataFrame({
    'ID' : test['ID'],
    'y' : y_test_pred
})

submission.head()

"""## Export"""

submission.to_csv('Submission_LR_F30.csv', index = False)





